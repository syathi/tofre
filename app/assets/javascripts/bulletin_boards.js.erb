// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
// You can use CoffeeScript in this file: http://coffeescript.org/
var tabwin1;

function set(){
    var originTab1 = $("#tab1").clone(true)
    //console.log(hooge)
    tabwin1 = document.getElementById("tab1")

    $(function() {

        /*ハートボタンの処理*/
        $(".heart").click(function() {
            var changeFav
            if($(this).children().eq(1).text() == 1){
                changeFav = ajaxDelete($(this).children().eq(2).text())
                changeFav.done(function(response){ console.log("delete done"); });
                changeFav.fail(function(response){ console.log("delete error"); });
                changeFav.always(function(response){ console.log("delete complete"); });
                $(this).children().eq(0).text("[♡]")
                $(this).children().eq(1).text("0")
            } else if($(this).children().eq(1).text() == 0){
                changeFav = ajaxPost($(this).children().eq(2).text())
                changeFav.done(function(response){ console.log("post done"); });
                changeFav.fail(function(response){ console.log("post error"); });
                changeFav.always(function(response){ console.log("post complete"); });
                $(this).children().eq(0).text("[♥︎]")
                $(this).children().eq(1).text("1")
            }
        })

        /*矢印(リプライ)ボタンの処理*/
        $(".arrow").click(function() {
            id = $(this).children()[1].innerText
            //キーボード操作などにより、オーバーレイが多重起動するのを防止する
            $(this).blur() ;    //ボタンからフォーカスを外す
            if($("#modal_overlay")[1]) return false ;       //新しくモーダルウィンドウを起動しない 

            //オーバーレイ用のHTMLコードを、[body]内の最後に生成する
            $("#contents").append('<div id="modal_overlay" id="genuine"></div>');
            //[$modal-overlay]をフェードインさせる
            // $("#modal_overlay").css("display", "block")
            // $("#modal_content").css("display", "block")
            $("#modal_overlay").fadeIn("slow");
            $("#modal_content").fadeIn("slow");
            centeringModalSyncer()
        })
        $("#modal_overlay,#modal_close").click(function(){
            $("#modal_content,#modal_overlay").fadeOut("slow",function(){
                $("#genuine").remove()
            })
        })


        /*ソート機能の処理*/
        $("#sort_menu").change(function(){

            // culumn no you select
            var key = $(this)[0].options.selectedIndex
            var idx = 0
            switch (key){
                case 0 ://公開順
                    var newTab1 = $("#tab1")
                    newTab1[0].innerHTML = originTab1[0].innerHTML
                    return;
                case 1 ://ユーザ名順
                    sortSelector = $(".user_name_header")
                    idx = 1
                    break;
                case 2 ://期限順
                    sortSelector = $(".deadline_header")
                    idx = 3
                    break;                
            }
            // get number of line and columns of the table
            var tab1FoodsRow = $("#tab1 .foods_article").length;
            var tab1FreshRow = $("#tab1 .fresh_article").length;

            var no_column = 5

            // get all entries and keep values in tab1FoodsArray
            var tab1FoodsArr = [];
            var tab1FreshArr = [];

            // flag for value type "strings" or "number only"
            var flag = 1;  // 0:number only  1:strings
            var re = /\D/;

            for(var i = 0; i < tab1FoodsRow; i++){
                tab1FoodsArr[i] = [];
                for(var j = 0; j < no_column; j++){
                    tab1FoodsArr[i][j] = $(".foods_article").eq(i).children().eq(j).html();
                }
            }
            for(var i = 0; i < tab1FreshRow; i++){
                tab1FreshArr[i] = [];
                for(var j = 0; j < no_column; j++){
                    tab1FreshArr[i][j] = $(".fresh_article").eq(i).children().eq(j).html();
                }
            }

            // sort by the key you selected
            var rs1foods = tab1FoodsArr.sort( function(a,b){ return sortOption(a, b, idx); } )
            var rs1fresh = tab1FreshArr.sort( function(a,b){ return sortOption(a, b, idx); } )

            // insert tab1FoodsArranged values into table
            for(var i = 0;i < rs1foods.length; i++){
                for(var j = 0;j < rs1foods[i].length; j++){
                    $(".foods_article").eq(i).children().eq(j).html(rs1foods[i][j]);
                }
            }
            for(var i = 0 ;i < rs1fresh.length; i++){
                for(var j = 0;j < rs1fresh[i].length; j++){
                    $(".fresh_article").eq(i).children().eq(j).html(rs1fresh[i][j]);
                }
            } 
        });



    });

}

/*引数tabを非表示にし、表示するタブを変更する
*  tab:現在表示されている方のタブ
*/

function sortOption(a, b, idx){
    if(a[idx] < b[idx]){
        console.log( "-1  " + a + "   " + b)
        return -1;
    } else if(a[idx] > b[idx]){
        console.log( "1  " + a + "   " + b)
        return 1;
    } else {
        console.log( "0  " + a + "   " + b)
        return 0;
    }
}

/*モーダルウィンドウを中央表示する
*/
function centeringModalSyncer(){

    //画面(ウィンドウ)の幅を取得し、変数[w]に格納
    var w = $(window).width();

    //画面(ウィンドウ)の高さを取得し、変数[h]に格納
    var h = $(window).height();

    //コンテンツ(#modal-content)の幅を取得し、変数[cw]に格納
    var cw = $("#modal-content").outerWidth({margin:true});

    //コンテンツ(#modal-content)の高さを取得し、変数[ch]に格納
    var ch = $("#modal-content").outerHeight({margin:true});

    //コンテンツ(#modal-content)を真ん中に配置するのに、左端から何ピクセル離せばいいか？を計算して、変数[pxleft]に格納
    var pxleft = ((w - cw)/2);

    //コンテンツ(#modal-content)を真ん中に配置するのに、上部から何ピクセル離せばいいか？を計算して、変数[pxtop]に格納
    var pxtop = ((h - ch)/2);

    //[#modal-content]のCSSに[left]の値(pxleft)を設定
    $("#modal-content").css({"left": pxleft + "px"});

    //[#modal-content]のCSSに[top]の値(pxtop)を設定
    $("#modal-content").css({"top": pxtop + "px"});

}

function ajaxDelete(reqUrl) {
    console.log(reqUrl)
    return $.ajax({
        type:'POST',
        data: {              
            "_method": "delete",
            "authenticity_token": $("#authenticity_token").val()
        },
        url:reqUrl,
        dataType: 'html'
    });
}

function ajaxPost(reqUrl) {
    console.log(reqUrl)
    return $.ajax({
        type:'POST',
        data: {   
            "_method": "post",
            "authenticity_token": $("#authenticity_token").val()
        },
        url:reqUrl,
        dataType: 'html'
    });
}
